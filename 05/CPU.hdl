// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=aInstructionP);
	And(a=instruction[3], b=instruction[15], out=writeM);
	//1st Mux
	Mux16(a=ALUout, b=instruction, sel=aInstructionP, out=toAregister);
	
	//A register
	And(a=instruction[15], b=instruction[5], out=st);
	Or(a=st, b=aInstructionP, out=loadAregis);
	ARegister(in=toAregister, load=loadAregis ,out=toMux2, out[0..14] =addressM);
	
	//2nd Mux
	Mux16(a=toMux2,b=inM,sel=instruction[12],out=ALU2);

	//D register
	And(a=instruction[4], b=instruction[15], out=loadDregis);
	DRegister(in=ALUout, load=loadDregis ,out=ALU1);
	
	//ALU
	ALU(x=ALU1, y=ALU2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=zr, ng=ng, out=outM);

	
	//not zr not ng
	Not(in=zr,out=zrinv);
	Not(in=ng,out=nginv);

	And(a=zrinv,b=nginv,out=JGT1);
	And(a=instruction[0],b=JGT1,out=JGT);

	And(a=zr,b=instruction[1],out=JEQ);
	Or(a=JEQ,b=JGT,out=load1);
	
	And(a=ng,b=instruction[2],out=JLT);
	Or(a=JLT, b=load1, out=load2);
	And(a=load2, b=instruction[15],out=load3);

	//PC
	PC(in=toMux2,reset=reset,load=load3, inc=true, out[0..14]=pc);
	
}
